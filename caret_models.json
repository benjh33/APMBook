[
 [
 "Boosted Classification Trees",
"ada",
"Classification",
"ada, plyr",
"iter, maxdepth, nu" 
],
[
 "Bagged AdaBoost",
"AdaBag",
"Classification",
"adabag, plyr",
"mfinal, maxdepth" 
],
[
 "AdaBoost.M1",
"AdaBoost.M1",
"Classification",
"adabag, plyr",
"mfinal, maxdepth, coeflearn" 
],
[
 "AdaBoost Classification Trees",
"adaboost",
"Classification",
"fastAdaboost",
"nIter, method" 
],
[
 "Adaptive Mixture Discriminant Analysis",
"amdai",
"Classification",
"adaptDA",
"model" 
],
[
 "Adaptive-Network-Based Fuzzy Inference System",
"ANFIS",
"Regression",
"frbs",
"num.labels, max.iter" 
],
[
 "Model Averaged Neural Network",
"avMxnet",
"Classification",
"mxnet",
"layer1, layer2, layer3, learning.rate, momentum, dropout, repeats" 
],
[
 "Model Averaged Neural Network",
"avNNet",
"Dual Use",
"nnet",
"size, decay, bag" 
],
[
 "Naive Bayes Classifier with Attribute Weighting",
"awnb",
"Classification",
"bnclassify",
"smooth" 
],
[
 "Tree Augmented Naive Bayes Classifier with Attribute Weighting",
"awtan",
"Classification",
"bnclassify",
"score, smooth" 
],
[
 "Bagged Model",
"bag",
"Dual Use",
"caret",
"vars" 
],
[
 "Bagged MARS",
"bagEarth",
"Dual Use",
"earth",
"nprune, degree" 
],
[
 "Bagged MARS using gCV Pruning",
"bagEarthGCV",
"Dual Use",
"earth",
"degree" 
],
[
 "Bagged Flexible Discriminant Analysis",
"bagFDA",
"Classification",
"earth, mda",
"degree, nprune" 
],
[
 "Bagged FDA using gCV Pruning",
"bagFDAGCV",
"Classification",
"earth",
"degree" 
],
[
 "Bayesian Additive Regression Trees",
"bartMachine",
"Dual Use",
"bartMachine",
"num_trees, k, alpha, beta, nu" 
],
[
 "Bayesian Generalized Linear Model",
"bayesglm",
"Dual Use",
"arm",
"None" 
],
[
 "Self-Organizing Map",
"bdk",
"Dual Use",
"kohonen",
"xdim, ydim, xweight, topo" 
],
[
 "Binary Discriminant Analysis",
"binda",
"Classification",
"binda",
"lambda.freqs" 
],
[
 "Boosted Tree",
"blackboost",
"Dual Use",
"party, mboost, plyr",
"mstop, maxdepth" 
],
[
 "The Bayesian lasso",
"blasso",
"Regression",
"monomvn",
"sparsity" 
],
[
 "Bayesian Ridge Regression (Model Averaged)",
"blassoAveraged",
"Regression",
"monomvn",
"None" 
],
[
 "Random Forest with Additional Feature Selection",
"Boruta",
"Dual Use",
"Boruta, randomForest",
"mtry" 
],
[
 "Bayesian Ridge Regression",
"bridge",
"Regression",
"monomvn",
"None" 
],
[
 "Bayesian Regularized Neural Networks",
"brnn",
"Regression",
"brnn",
"neurons" 
],
[
 "Boosted Linear Model",
"BstLm",
"Dual Use",
"bst, plyr",
"mstop, nu" 
],
[
 "Boosted Smoothing Spline",
"bstSm",
"Dual Use",
"bst, plyr",
"mstop, nu" 
],
[
 "Boosted Tree",
"bstTree",
"Dual Use",
"bst, plyr",
"mstop, maxdepth, nu" 
],
[
 "C5.0",
"C5.0",
"Classification",
"C50, plyr",
"trials, model, winnow" 
],
[
 "Cost-Sensitive C5.0",
"C5.0Cost",
"Classification",
"C50, plyr",
"trials, model, winnow, cost" 
],
[
 "Single C5.0 Ruleset",
"C5.0Rules",
"Classification",
"C50",
"None" 
],
[
 "Single C5.0 Tree",
"C5.0Tree",
"Classification",
"C50",
"None" 
],
[
 "Conditional Inference Random Forest",
"cforest",
"Dual Use",
"party",
"mtry" 
],
[
 "CHi-squared Automated Interaction Detection",
"chaid",
"Classification",
"CHAID",
"alpha2, alpha3, alpha4" 
],
[
 "SIMCA",
"CSimca",
"Classification",
"rrcovHD",
"None" 
],
[
 "Conditional Inference Tree",
"ctree",
"Dual Use",
"party",
"mincriterion" 
],
[
 "Conditional Inference Tree",
"ctree2",
"Dual Use",
"party",
"maxdepth" 
],
[
 "Cubist",
"cubist",
"Regression",
"Cubist",
"committees, neighbors" 
],
[
 "DeepBoost",
"deepboost",
"Classification",
"deepboost",
"num_iter, tree_depth, beta, lambda, loss_type" 
],
[
 "Dynamic Evolving Neural-Fuzzy Inference System ",
"DENFIS",
"Regression",
"frbs",
"Dthr, max.iter" 
],
[
 "Stacked AutoEncoder Deep Neural Network",
"dnn",
"Dual Use",
"deepnet",
"layer1, layer2, layer3, hidden_dropout, visible_dropout" 
],
[
 "Linear Distance Weighted Discrimination",
"dwdLinear",
"Classification",
"kerndwd",
"lambda, qval" 
],
[
 "Distance Weighted Discrimination with Polynomial Kernel",
"dwdPoly",
"Classification",
"kerndwd",
"lambda, qval, degree, scale" 
],
[
 "Distance Weighted Discrimination with Radial Basis Function Kernel",
"dwdRadial",
"Classification",
"kernlab, kerndwd",
"lambda, qval, sigma" 
],
[
 "Multivariate Adaptive Regression Spline",
"earth",
"Dual Use",
"earth",
"nprune, degree" 
],
[
 "Extreme Learning Machine",
"elm",
"Dual Use",
"elmNN",
"nhid, actfun" 
],
[
 "Elasticnet",
"enet",
"Regression",
"elasticnet",
"fraction, lambda" 
],
[
 "Ensemble Partial Least Squares Regression with Feature Selection",
"enpls.fs",
"Regression",
"enpls",
"maxcomp, threshold" 
],
[
 "Ensemble Partial Least Squares Regression",
"enpls",
"Regression",
"enpls",
"maxcomp" 
],
[
 "Tree Models from Genetic Algorithms",
"evtree",
"Dual Use",
"evtree",
"alpha" 
],
[
 "Random Forest by Randomization",
"extraTrees",
"Dual Use",
"extraTrees",
"mtry, numRandomCuts" 
],
[
 "Flexible Discriminant Analysis",
"fda",
"Classification",
"earth, mda",
"degree, nprune" 
],
[
 "Fuzzy Rules Using Genetic Cooperative-Competitive Learning and Pittsburgh",
"FH.GBML",
"Classification",
"frbs",
"max.num.rule, popu.size, max.gen" 
],
[
 "Fuzzy Inference Rules by Descent Method",
"FIR.DM",
"Regression",
"frbs",
"num.labels, max.iter" 
],
[
 "Ridge Regression with Variable Selection",
"foba",
"Regression",
"foba",
"k, lambda" 
],
[
 "Fuzzy Rules Using Chi's Method",
"FRBCS.CHI",
"Classification",
"frbs",
"num.labels, type.mf" 
],
[
 "Fuzzy Rules with Weight Factor",
"FRBCS.W",
"Classification",
"frbs",
"num.labels, type.mf" 
],
[
 "Simplified TSK Fuzzy Rules",
"FS.HGD",
"Regression",
"frbs",
"num.labels, max.iter" 
],
[
 "Generalized Additive Model using Splines",
"gam",
"Dual Use",
"mgcv",
"select, method" 
],
[
 "Boosted Generalized Additive Model",
"gamboost",
"Dual Use",
"mboost, plyr",
"mstop, prune" 
],
[
 "Generalized Additive Model using LOESS",
"gamLoess",
"Dual Use",
"gam",
"span, degree" 
],
[
 "Generalized Additive Model using Splines",
"gamSpline",
"Dual Use",
"gam",
"df" 
],
[
 "Gaussian Process",
"gaussprLinear",
"Dual Use",
"kernlab",
"None" 
],
[
 "Gaussian Process with Polynomial Kernel",
"gaussprPoly",
"Dual Use",
"kernlab",
"degree, scale" 
],
[
 "Gaussian Process with Radial Basis Function Kernel",
"gaussprRadial",
"Dual Use",
"kernlab",
"sigma" 
],
[
 "Stochastic Gradient Boosting",
"gbm",
"Dual Use",
"gbm, plyr",
"n.trees, interaction.depth, shrinkage, n.minobsinnode" 
],
[
 "Multivariate Adaptive Regression Splines",
"gcvEarth",
"Dual Use",
"earth",
"degree" 
],
[
 "Fuzzy Rules via MOGUL",
"GFS.FR.MOGUL",
"Regression",
"frbs",
"max.gen, max.iter, max.tune" 
],
[
 "Fuzzy Rules Using Genetic Cooperative-Competitive Learning",
"GFS.GCCL",
"Classification",
"frbs",
"num.labels, popu.size, max.gen" 
],
[
 "Genetic Lateral Tuning and Rule Selection of Linguistic Fuzzy Systems",
"GFS.LT.RS",
"Regression",
"frbs",
"popu.size, num.labels, max.gen" 
],
[
 "Fuzzy Rules via Thrift",
"GFS.THRIFT",
"Regression",
"frbs",
"popu.size, num.labels, max.gen" 
],
[
 "Generalized Linear Model",
"glm",
"Dual Use",
"",
"None" 
],
[
 "Boosted Generalized Linear Model",
"glmboost",
"Dual Use",
"plyr, mboost",
"mstop, prune" 
],
[
 "glmnet",
"glmnet",
"Dual Use",
"glmnet",
"alpha, lambda" 
],
[
 "Generalized Linear Model with Stepwise Feature Selection",
"glmStepAIC",
"Dual Use",
"MASS",
"None" 
],
[
 "Generalized Partial Least Squares",
"gpls",
"Classification",
"gpls",
"K.prov" 
],
[
 "Heteroscedastic Discriminant Analysis",
"hda",
"Classification",
"hda",
"gamma, lambda, newdim" 
],
[
 "High Dimensional Discriminant Analysis",
"hdda",
"Classification",
"HDclassif",
"threshold, model" 
],
[
 "Hybrid Neural Fuzzy Inference System",
"HYFIS",
"Regression",
"frbs",
"num.labels, max.iter" 
],
[
 "Independent Component Regression",
"icr",
"Regression",
"fastICA",
"n.comp" 
],
[
 "C4.5-like Trees",
"J48",
"Classification",
"RWeka",
"C" 
],
[
 "Rule-Based Classifier",
"JRip",
"Classification",
"RWeka",
"NumOpt" 
],
[
 "Partial Least Squares",
"kernelpls",
"Dual Use",
"pls",
"ncomp" 
],
[
 "k-Nearest Neighbors",
"kknn",
"Dual Use",
"kknn",
"kmax, distance, kernel" 
],
[
 "k-Nearest Neighbors",
"knn",
"Dual Use",
"",
"k" 
],
[
 "Polynomial Kernel Regularized Least Squares",
"krlsPoly",
"Regression",
"KRLS",
"lambda, degree" 
],
[
 "Radial Basis Function Kernel Regularized Least Squares",
"krlsRadial",
"Regression",
"KRLS, kernlab",
"lambda, sigma" 
],
[
 "Least Angle Regression",
"lars",
"Regression",
"lars",
"fraction" 
],
[
 "Least Angle Regression",
"lars2",
"Regression",
"lars",
"step" 
],
[
 "The lasso",
"lasso",
"Regression",
"elasticnet",
"fraction" 
],
[
 "Linear Discriminant Analysis",
"lda",
"Classification",
"MASS",
"None" 
],
[
 "Linear Discriminant Analysis",
"lda2",
"Classification",
"MASS",
"dimen" 
],
[
 "Linear Regression with Backwards Selection",
"leapBackward",
"Regression",
"leaps",
"nvmax" 
],
[
 "Linear Regression with Forward Selection",
"leapForward",
"Regression",
"leaps",
"nvmax" 
],
[
 "Linear Regression with Stepwise Selection",
"leapSeq",
"Regression",
"leaps",
"nvmax" 
],
[
 "Robust Linear Discriminant Analysis",
"Linda",
"Classification",
"rrcov",
"None" 
],
[
 "Linear Regression",
"lm",
"Regression",
"",
"None" 
],
[
 "Linear Regression with Stepwise Selection",
"lmStepAIC",
"Regression",
"MASS",
"None" 
],
[
 "Logistic Model Trees",
"LMT",
"Classification",
"RWeka",
"iter" 
],
[
 "Localized Linear Discriminant Analysis",
"loclda",
"Classification",
"klaR",
"k" 
],
[
 "Bagged Logic Regression",
"logicBag",
"Dual Use",
"logicFS",
"nleaves, ntrees" 
],
[
 "Boosted Logistic Regression",
"LogitBoost",
"Classification",
"caTools",
"nIter" 
],
[
 "Logic Regression",
"logreg",
"Dual Use",
"LogicReg",
"treesize, ntrees" 
],
[
 "Least Squares Support Vector Machine",
"lssvmLinear",
"Classification",
"kernlab",
"None" 
],
[
 "Least Squares Support Vector Machine with Polynomial Kernel",
"lssvmPoly",
"Classification",
"kernlab",
"degree, scale" 
],
[
 "Least Squares Support Vector Machine with Radial Basis Function Kernel",
"lssvmRadial",
"Classification",
"kernlab",
"sigma" 
],
[
 "Learning Vector Quantization",
"lvq",
"Classification",
"class",
"size, k" 
],
[
 "Model Tree",
"M5",
"Regression",
"RWeka",
"pruned, smoothed, rules" 
],
[
 "Model Rules",
"M5Rules",
"Regression",
"RWeka",
"pruned, smoothed" 
],
[
 "Model Averaged Naive Bayes Classifier",
"manb",
"Classification",
"bnclassify",
"smooth, prior" 
],
[
 "Mixture Discriminant Analysis",
"mda",
"Classification",
"mda",
"subclasses" 
],
[
 "Maximum Uncertainty Linear Discriminant Analysis",
"Mlda",
"Classification",
"HiDimDA",
"None" 
],
[
 "Multi-Layer Perceptron",
"mlp",
"Dual Use",
"RSNNS",
"size" 
],
[
 "Multi-Layer Perceptron, with multiple layers",
"mlpML",
"Dual Use",
"RSNNS",
"layer1, layer2, layer3" 
],
[
 "Multi-Layer Perceptron",
"mlpWeightDecay",
"Dual Use",
"RSNNS",
"size, decay" 
],
[
 "Multi-Layer Perceptron, multiple layers",
"mlpWeightDecayML",
"Dual Use",
"RSNNS",
"layer1, layer2, layer3, decay" 
],
[
 "Penalized Multinomial Regression",
"multinom",
"Classification",
"nnet",
"decay" 
],
[
 "Naive Bayes",
"nb",
"Classification",
"klaR",
"fL, usekernel, adjust" 
],
[
 "Naive Bayes Classifier",
"nbDiscrete",
"Classification",
"bnclassify",
"smooth" 
],
[
 "Semi-Naive Structure Learner Wrapper",
"nbSearch",
"Classification",
"bnclassify",
"k, epsilon, smooth, final_smooth, direction" 
],
[
 "Neural Network",
"neuralnet",
"Regression",
"neuralnet",
"layer1, layer2, layer3" 
],
[
 "Neural Network",
"nnet",
"Dual Use",
"nnet",
"size, decay" 
],
[
 "Non-Negative Least Squares",
"nnls",
"Regression",
"nnls",
"None" 
],
[
 "Tree-Based Ensembles",
"nodeHarvest",
"Dual Use",
"nodeHarvest",
"maxinter, mode" 
],
[
 "Oblique Trees",
"oblique.tree",
"Classification",
"oblique.tree",
"oblique.splits, variable.selection" 
],
[
 "Single Rule Classification",
"OneR",
"Classification",
"RWeka",
"None" 
],
[
 "Oblique Random Forest",
"ORFlog",
"Classification",
"obliqueRF",
"mtry" 
],
[
 "Oblique Random Forest",
"ORFpls",
"Classification",
"obliqueRF",
"mtry" 
],
[
 "Oblique Random Forest",
"ORFridge",
"Classification",
"obliqueRF",
"mtry" 
],
[
 "Oblique Random Forest",
"ORFsvm",
"Classification",
"obliqueRF",
"mtry" 
],
[
 "Optimal Weighted Nearest Neighbor Classifier",
"ownn",
"Classification",
"snn",
"K" 
],
[
 "Nearest Shrunken Centroids",
"pam",
"Classification",
"pamr",
"threshold" 
],
[
 "Parallel Random Forest",
"parRF",
"Dual Use",
"e1071, randomForest, foreach",
"mtry" 
],
[
 "Rule-Based Classifier",
"PART",
"Classification",
"RWeka",
"threshold, pruned" 
],
[
 "partDSA",
"partDSA",
"Dual Use",
"partDSA",
"cut.off.growth, MPD" 
],
[
 "Neural Networks with Feature Extraction",
"pcaNNet",
"Dual Use",
"nnet",
"size, decay" 
],
[
 "Principal Component Analysis",
"pcr",
"Regression",
"pls",
"ncomp" 
],
[
 "Penalized Discriminant Analysis",
"pda",
"Classification",
"mda",
"lambda" 
],
[
 "Penalized Discriminant Analysis",
"pda2",
"Classification",
"mda",
"df" 
],
[
 "Penalized Linear Regression",
"penalized",
"Regression",
"penalized",
"lambda1, lambda2" 
],
[
 "Penalized Linear Discriminant Analysis",
"PenalizedLDA",
"Classification",
"penalizedLDA, plyr",
"lambda, K" 
],
[
 "Penalized Logistic Regression",
"plr",
"Classification",
"stepPlr",
"lambda, cp" 
],
[
 "Partial Least Squares",
"pls",
"Dual Use",
"pls",
"ncomp" 
],
[
 "Partial Least Squares Generalized Linear Models ",
"plsRglm",
"Dual Use",
"plsRglm",
"nt, alpha.pvals.expli" 
],
[
 "Ordered Logistic or Probit Regression",
"polr",
"Classification",
"MASS",
"None" 
],
[
 "Projection Pursuit Regression",
"ppr",
"Regression",
"",
"nterms" 
],
[
 "Greedy Prototype Selection",
"protoclass",
"Classification",
"proxy, protoclass",
"eps, Minkowski" 
],
[
 "Knn regression via sklearn.neighbors.KNeighborsRegressor",
"pythonKnnReg",
"Regression",
"rPython",
"n_neighbors, weights, algorithm, leaf_size, metric, p" 
],
[
 "Quadratic Discriminant Analysis",
"qda",
"Classification",
"MASS",
"None" 
],
[
 "Robust Quadratic Discriminant Analysis",
"QdaCov",
"Classification",
"rrcov",
"None" 
],
[
 "Quantile Random Forest",
"qrf",
"Regression",
"quantregForest",
"mtry" 
],
[
 "Quantile Regression Neural Network",
"qrnn",
"Regression",
"qrnn",
"n.hidden, penalty, bag" 
],
[
 "Ensembles of Generalized Lienar Models",
"randomGLM",
"Dual Use",
"randomGLM",
"maxInteractionOrder" 
],
[
 "Random Forest",
"ranger",
"Dual Use",
"e1071, ranger",
"mtry" 
],
[
 "Radial Basis Function Network",
"rbf",
"Dual Use",
"RSNNS",
"size" 
],
[
 "Radial Basis Function Network",
"rbfDDA",
"Dual Use",
"RSNNS",
"negativeThreshold" 
],
[
 "Regularized Discriminant Analysis",
"rda",
"Classification",
"klaR",
"gamma, lambda" 
],
[
 "Relaxed Lasso",
"relaxo",
"Regression",
"relaxo, plyr",
"lambda, phi" 
],
[
 "Random Forest",
"rf",
"Dual Use",
"randomForest",
"mtry" 
],
[
 "Random Ferns",
"rFerns",
"Classification",
"rFerns",
"depth" 
],
[
 "Factor-Based Linear Discriminant Analysis",
"RFlda",
"Classification",
"HiDimDA",
"q" 
],
[
 "Random Forest Rule-Based Model",
"rfRules",
"Dual Use",
"randomForest, inTrees, plyr",
"mtry, maxdepth" 
],
[
 "Ridge Regression",
"ridge",
"Regression",
"elasticnet",
"lambda" 
],
[
 "Robust Linear Model",
"rlm",
"Regression",
"MASS",
"None" 
],
[
 "Robust Mixture Discriminant Analysis",
"rmda",
"Classification",
"robustDA",
"K, model" 
],
[
 "ROC-Based Classifier",
"rocc",
"Classification",
"rocc",
"xgenes" 
],
[
 "Rotation Forest",
"rotationForest",
"Classification",
"rotationForest",
"K, L" 
],
[
 "Rotation Forest",
"rotationForestCp",
"Classification",
"rpart, plyr, rotationForest",
"K, L, cp" 
],
[
 "CART",
"rpart",
"Dual Use",
"rpart",
"cp" 
],
[
 "CART",
"rpart1SE",
"Dual Use",
"rpart",
"None" 
],
[
 "CART",
"rpart2",
"Dual Use",
"rpart",
"maxdepth" 
],
[
 "Cost-Sensitive CART",
"rpartCost",
"Classification",
"rpart",
"cp, Cost" 
],
[
 "Quantile Regression with LASSO penalty",
"rqlasso",
"Regression",
"rqPen",
"lambda" 
],
[
 "Non-Convex Penalized Quantile Regression",
"rqnc",
"Regression",
"rqPen",
"lambda, penalty" 
],
[
 "Regularized Random Forest",
"RRF",
"Dual Use",
"randomForest, RRF",
"mtry, coefReg, coefImp" 
],
[
 "Regularized Random Forest",
"RRFglobal",
"Dual Use",
"RRF",
"mtry, coefReg" 
],
[
 "Robust Regularized Linear Discriminant Analysis",
"rrlda",
"Classification",
"rrlda",
"lambda, hp, penalty" 
],
[
 "Robust SIMCA",
"RSimca",
"Classification",
"rrcovHD",
"None" 
],
[
 "Relevance Vector Machines with Linear Kernel",
"rvmLinear",
"Regression",
"kernlab",
"None" 
],
[
 "Relevance Vector Machines with Polynomial Kernel",
"rvmPoly",
"Regression",
"kernlab",
"scale, degree" 
],
[
 "Relevance Vector Machines with Radial Basis Function Kernel",
"rvmRadial",
"Regression",
"kernlab",
"sigma" 
],
[
 "Subtractive Clustering and Fuzzy c-Means Rules",
"SBC",
"Regression",
"frbs",
"r.a, eps.high, eps.low" 
],
[
 "Shrinkage Discriminant Analysis",
"sda",
"Classification",
"sda",
"diagonal, lambda" 
],
[
 "Stepwise Diagonal Linear Discriminant Analysis",
"sddaLDA",
"Classification",
"SDDA",
"None" 
],
[
 "Stepwise Diagonal Quadratic Discriminant Analysis",
"sddaQDA",
"Classification",
"SDDA",
"None" 
],
[
 "Sparse Distance Weighted Discrimination",
"sdwd",
"Classification",
"sdwd",
"lambda, lambda2" 
],
[
 "Partial Least Squares",
"simpls",
"Dual Use",
"pls",
"ncomp" 
],
[
 "Fuzzy Rules Using the Structural Learning Algorithm on Vague Environment",
"SLAVE",
"Classification",
"frbs",
"num.labels, max.iter, max.gen" 
],
[
 "Stabilized Linear Discriminant Analysis",
"slda",
"Classification",
"ipred",
"None" 
],
[
 "Sparse Mixture Discriminant Analysis",
"smda",
"Classification",
"sparseLDA",
"NumVars, lambda, R" 
],
[
 "Stabilized Nearest Neighbor Classifier",
"snn",
"Classification",
"snn",
"lambda" 
],
[
 "Sparse Linear Discriminant Analysis",
"sparseLDA",
"Classification",
"sparseLDA",
"NumVars, lambda" 
],
[
 "Spike and Slab Regression",
"spikeslab",
"Regression",
"spikeslab, plyr",
"vars" 
],
[
 "Sparse Partial Least Squares",
"spls",
"Dual Use",
"spls",
"K, eta, kappa" 
],
[
 "Linear Discriminant Analysis with Stepwise Feature Selection",
"stepLDA",
"Classification",
"klaR, MASS",
"maxvar, direction" 
],
[
 "Quadratic Discriminant Analysis with Stepwise Feature Selection",
"stepQDA",
"Classification",
"klaR, MASS",
"maxvar, direction" 
],
[
 "Supervised Principal Component Analysis",
"superpc",
"Regression",
"superpc",
"threshold, n.components" 
],
[
 "Support Vector Machines with Boundrange String Kernel",
"svmBoundrangeString",
"Dual Use",
"kernlab",
"length, C" 
],
[
 "Support Vector Machines with Exponential String Kernel",
"svmExpoString",
"Dual Use",
"kernlab",
"lambda, C" 
],
[
 "Support Vector Machines with Linear Kernel",
"svmLinear",
"Dual Use",
"kernlab",
"C" 
],
[
 "Support Vector Machines with Linear Kernel",
"svmLinear2",
"Dual Use",
"e1071",
"cost, gamma" 
],
[
 "Support Vector Machines with Polynomial Kernel",
"svmPoly",
"Dual Use",
"kernlab",
"degree, scale, C" 
],
[
 "Support Vector Machines with Radial Basis Function Kernel",
"svmRadial",
"Dual Use",
"kernlab",
"sigma, C" 
],
[
 "Support Vector Machines with Radial Basis Function Kernel",
"svmRadialCost",
"Dual Use",
"kernlab",
"C" 
],
[
 "Support Vector Machines with Radial Basis Function Kernel",
"svmRadialSigma",
"Dual Use",
"kernlab",
"sigma, C" 
],
[
 "Support Vector Machines with Class Weights",
"svmRadialWeights",
"Classification",
"kernlab",
"sigma, C, Weight" 
],
[
 "Support Vector Machines with Spectrum String Kernel",
"svmSpectrumString",
"Dual Use",
"kernlab",
"length, C" 
],
[
 "Tree Augmented Naive Bayes Classifier",
"tan",
"Classification",
"bnclassify",
"score, smooth" 
],
[
 "Tree Augmented Naive Bayes Classifier Structure Learner Wrapper",
"tanSearch",
"Classification",
"bnclassify",
"k, epsilon, smooth, final_smooth, sp" 
],
[
 "Bagged CART",
"treebag",
"Dual Use",
"ipred, plyr, e1071",
"None" 
],
[
 "Variational Bayesian Multinomial Probit Regression",
"vbmpRadial",
"Classification",
"vbmp",
"estimateTheta" 
],
[
 "Partial Least Squares",
"widekernelpls",
"Dual Use",
"pls",
"ncomp" 
],
[
 "Wang and Mendel Fuzzy Rules",
"WM",
"Regression",
"frbs",
"num.labels, type.mf" 
],
[
 "Weighted Subspace Random Forest",
"wsrf",
"Classification",
"wsrf",
"mtry" 
],
[
 "eXtreme Gradient Boosting",
"xgbLinear",
"Dual Use",
"xgboost",
"nrounds, lambda, alpha, eta" 
],
[
 "eXtreme Gradient Boosting",
"xgbTree",
"Dual Use",
"xgboost, plyr",
"nrounds, max_depth, eta, gamma, colsample_bytree, min_child_weight" 
],
[
 "Self-Organizing Maps",
"xyf",
"Dual Use",
"kohonen",
"xdim, ydim, xweight, topo" 
] 
];
